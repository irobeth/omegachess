<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="48" height="48"
	click="cell_clickHandler(event)"
	borderStyle="solid"
	borderThickness="1"
	borderSides="left top"
	borderColor="#000000"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"		
	>
	<mx:Script>
		<![CDATA[
			import mx.controls.Text;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import net.omegachess.classes.pieces.Hole;
			import net.omegachess.classes.pieces.Piece;
			import net.omegachess.events.CellSelectedEvent;
			import net.omegachess.intents.Intent;
			import net.omegachess.intents.IntentRegistry;
			
			internal var canFireIntents : Boolean = false;
			
			private var _rank : Number;
			
			private var _file : Number;
			
			private var _piece : Piece;			
			
			[Bindable]
			private var __tooltipString;
			
			public function get piece() : Piece {
				//-think- confirmed I'm losing information here
				//return ObjectUtil.copy(_piece) as Piece;				
				return _piece;
			}
			
			public function set piece ( p : Piece ) : void {
				_piece = p;
				_piece.setPosition(_rank, _file);
			}
			
			public function get rank() : Number {
				return this._rank;				
			}
			
			public function set rank( r : Number ) : void {				
				this._rank = r;
				this.__tooltipString = this.toACN();
			}
			
			public function get file() : Number {
				return this._file;
			}
			
			public function set file( f : Number ) : void {
				this._file = f;
				this.__tooltipString = this.toACN();
			}
			
			private function positionCell() : void {
				//trace("Positioning a cell at " + file + rank.toString());				
				x = _file * this.width;
				y = 11 * this.height - this.height * _rank;				
			}
			
			public function draw(color : String = null) : void {								
				positionCell();
				
				if(color == null) {
					//trace("Color is " + color);
					switch(this.color) {
						case Piece.ALIGNMENT_NONE :
							setStyle("backgroundColor", "#000000");	
						break;
						
						case Piece.ALIGNMENT_WHITE :
							setStyle("backgroundColor", Constants.CELL_COLOR_WHITE);
						break;
						
						case Piece.ALIGNMENT_BLACK :
							setStyle("backgroundColor", Constants.CELL_COLOR_BLACK);	
						break;
					}
				} else {
					setStyle("backgroundColor", color);
				}
				
				
				this.removeAllChildren();
				this.addChild(piece.getItemRenderer());				
				this.renderLabel();
				this.renderHelper();
			}
			
			public function renderHelper() {
				if(this.color !== Piece.ALIGNMENT_NONE) {
					var c = new Canvas();
						c.width = this.width;
						c.height = this.height; 
						c.setStyle("backgroundColor", "#FFFFFF");
						c.alpha = .9;
						c.verticalCenter = 0;
						c.horizontalCenter = 0;
						c.visible = false;
						
					var t = new Text();
						t.verticalCenter = 0;
						t.horizontalCenter = 0;
						t.text = this.acn.toUpperCase();
						t.setStyle("fontSize", "16");
						t.setStyle("color", "#000000");
						t.selectable = false;						
						c.addChild(t);
												
					this.addEventListener(MouseEvent.RIGHT_CLICK, function(event : MouseEvent) {						
						c.visible = true;
						Mouse.hide();
					});
					
					this.addEventListener(MouseEvent.CLICK, function(event) {
						c.visible = false;
						Mouse.show();
					});
					
					this.addEventListener(MouseEvent.MOUSE_OUT, function(event) {
						c.visible = false;
						Mouse.show();
					});
					
					this.addChild(c);
				}
			}
			
			public function renderLabel() {
				if(_file == 0 || _rank == 0 || (_file == 11 && _rank == 11)) {
					var te : Text = new Text();

					te.text = this.acn;
					te.selectable = false;
					
					var isWizard : Boolean = this.acn.charAt(0) == "w";
					
					te.setStyle("color", isWizard ? "#000000" : "#FFFFFF");

					if(isWizard) {
						te.left = 2;
						te.setStyle("color", "#000000");
					} else {
						te.setStyle("color", "#FFFFFF");
						
						if(_file == 0) {
							te.verticalCenter = 0;
							te.right = 2;
						} else if(_rank == 0) {
							te.horizontalCenter= 0;
							te.top = 2;
						}
					}
																
					this.addChild(te);
				}
			}
			
			public function vacate() : void {
				piece = new Hole();
				piece.alignment = Piece.ALIGNMENT_NONE;
				piece.hasMoved = false;
				piece.setPosition(_rank, _file);
			}
			

			protected function cell_clickHandler(event:MouseEvent):void {
				Debug.show(Debug.FUNCTION, "Cell::cell_clickHandler", "");
				Debug.show(Debug.TRACE, "Selected Cell", this.toString());
				Debug.show(Debug.TRACE, "Selected Cell", _rank + ", " + _file);

				if(canFireIntents) {
					var i : Intent 	= new Intent(this);
						i.data 		= this;
						i.type 		= Intent.INTENT_TYPE_CELL_SELECTED;
						
					IntentRegistry.handleIntent(i);
				} else {
					var cse : CellSelectedEvent = new CellSelectedEvent(this, CellSelectedEvent.CELL_SELECTED);
					cse.cell = this;
					dispatchEvent(cse);					
				}
			}

			public function get color() : Number {
				
				if(_rank == 0 && _file != 0 && _file != 11) {
					return Piece.ALIGNMENT_NONE;
				} else if(_rank == 11 && _file != 0 && _file != 11) {
					return Piece.ALIGNMENT_NONE;
				} else if(_file == 0 && _rank != 0 && _rank != 11) {
					return Piece.ALIGNMENT_NONE;
				} else if(_file == 11 && _rank != 0 && _rank != 11) {
					return Piece.ALIGNMENT_NONE;
				}
				
				if((_rank + _file) % 2 == 0) {
					return Piece.ALIGNMENT_WHITE;
				} else {
					return Piece.ALIGNMENT_BLACK;
				}
			} 
			
			public override function toString() : String {
				var _files : Array = ["w", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "w"];
				
				if(_rank == 0) {
					if(_file == 0) {
						return (_piece.acn() + "@ w3");
					} else if(_file == 11) {
						return (_piece.acn() + "@ w4");
					} else {
						return "X @ XX";
					}	
				}else if(_rank == 11) {
					if(_file == 0) {
						return (_piece.acn() + "@ w1");
					} else if(_file == 11) {
						return (_piece.acn() + "@ w2");	
					} else {
						return "X @ XX";
					}					
				} else {				
					return (_piece.acn() + "@" + _files[_file] + (_rank-1));	
				}				
			}
			
			public function get acn() : String {
				return this.toACN();
			}
			
			public function toACN() : String {
				var _files : Array = ["w", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "w"];
				
				if(_rank == 0) {
					if(_file == 0) {
						return "w3";
					} else if(_file == 11) {
						return "w4";
					} else {
						return _files[_file];
					}	
				}else if(_rank == 11) {
					if(_file == 0) {
						return "w1";
					} else if(_file == 11) {
						return "w2";	
					} else {
						return "XX";
					}					
				} else {
					if(_file == 0 || _file == 11) {
						return new String(_rank - 1);
					} else {
						//if(_files[_file] == undefined) throw new Error("OOPS");
						return _files[_file] + new String(_rank-1);	
					}
				}				
			}
			
			public function copy() : Cell {
				
				var c : Cell = new Cell();
					c.rank = _rank;
					c.file = _file;
					c.piece = ObjectUtil.copy(_piece) as Piece; //this probably won't work?
					c.piece.setPosition(_rank, _file);
				return c;
				
			}
		]]>
	</mx:Script>	
</mx:Canvas>